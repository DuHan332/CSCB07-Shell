package command;

import java.util.ArrayList;

import driver.Tracker;
import nodetype.*;
import helper.*;

public class List implements Commands {
	public String execute(String[] input, Tracker track) {
		if (input.length == 0) {
			return list(track.getCurrent_directory());
		}
		if (input.length == 1) {
			return list(input[0], track.getRoot_directory(), 
					track.getCurrent_directory());
		} else {
			StringBuilder result = new StringBuilder();
			for (String i : input) {
				result.append(list(i, track.getRoot_directory(), 
						track.getCurrent_directory()));
				result.append("\r");
			}
			result.deleteCharAt(result.length() - 1);
			String strresult = result.toString();
			return strresult;
		}
	}

	static private String list(String input, Directory rd, Directory cwd) {
		if (input.substring(0, 1).equals("\\")) {
			return list4full(input, rd, cwd);
		} else {
			return list4re(input, rd, cwd);
		}
	}

	private static String list(Directory directory) {
		String result3 = listnodes(directory);
		return result3;
	}
	
	static private String list4full(String input, Directory rd, Directory cwd) {
		if (input.equals("\\")) {
			return list(rd);
		}
		String[] temp = input.split("\\\\");
		ArrayList<String> path = new ArrayList<>();
		for (String i : temp) {
			path.add(i);
		}
		path.remove(0);
		JNode target = FindPath.findpath(path, rd);
		if (target == null) {
			return "Error1 " + input;// target directory DNE
		} else if (target.getIs_directory() == false) {
			return target.getName() + "\n";
		} else {
			String result = listnodes((Directory) target);
			return result;
		}
	}
	
	static private String list4re(String input, Directory rd, Directory cwd) {
		String[] temp2 = input.split("\\\\");
		ArrayList<String> path2 = new ArrayList<>();
		for (String i : temp2) {
			path2.add(i);
		}
		JNode target = FindPath.findpath(path2, cwd);
		if (target == null) {
			return "Error1 " + input;// target directory DNE
		} else if (target.getIs_directory() == false) {
			return target.getName() + "\n";
		} else {
			String result2 = listnodes((Directory) target);
			return result2;
		}
	}

///////////////////////////////////////////////////////////////////////
//	static private JNode lsHelper(ArrayList<String> list,
//			Directory directory) {
//		if (list.isEmpty()) {
//			return directory;
//		} else {
//			for (JNode i : directory.getSub()) {
//				if (i.getName().equals(list.get(0))) {
//					if(i.getIs_directory()==false)
//					{
//						if (list.size()==1) 
//						{
//							return i;
//						}
//						else {
//							return null;
//						}
//					}
//					list.remove(0);
//					return lsHelper(list, (Directory) i);
////					
//					
//				}
//			}
//			return null;
//		}
//	}

	static private String listnodes(Directory directory) {
		ArrayList<String> ctList = new ArrayList<String>();
		for (JNode i : directory.getSub()) {
			ctList.add(i.getName());
		}
		StringBuilder result = new StringBuilder();
		result.append(directory.getName() + ":");
		for (String i : ctList) {
			result.append(i);
			result.append(" ");
		}
		if(ctList.size()!=0) {
		result.deleteCharAt(result.length() - 1);
		}
		result.append("\n");
		String strresult = result.toString();
		return strresult;
	}

}
