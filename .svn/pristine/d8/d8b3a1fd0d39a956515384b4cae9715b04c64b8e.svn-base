package helper;

import java.util.ArrayList;
import driver.Tracker;
import exception.SystemErrorException;
import nodetype.Directory;
import nodetype.File;
import nodetype.JNode;

/**
 * This class is able to append string to a specific file or create a new file and add string to the
 * new file.
 * 
 * @author Yuanqian Fang
 *
 */

public class RedirectAppend {
  /**
   * This function would first transform the string of path to an ArrayList by calling the function
   * named path_to_arraylist and the create a new ArrayList that removes the last element of the
   * previous ArrayList. Then the function would judge whether the path is absolute path or relative
   * path and call the function named redirect_append to to perform a series of operations. And the
   * function could throw error based on what redirect_append returns.
   * 
   * @param input_content a string need to be appended to a file
   * @param path a string contains information of path
   * @param track a Tracker that track the root directory and current directory
   * @throws SystemErrorException
   */
  static public void execute(String input_content, String path, Tracker tracker)
      throws SystemErrorException {
    ArrayList<String> full_path = path_to_arraylist(path);
    ArrayList<String> sub_path = new ArrayList<String>();
    for (String s : full_path) {
      sub_path.add(s);
    }
    String filename = full_path.get(full_path.size() - 1);
    sub_path.remove(sub_path.size() - 1);
    if (path.substring(0, 1).equals("/") == false) {
      int result = redirect_append(input_content, filename, full_path, sub_path,
          tracker.getCurrent_directory());
      if (result == 2)
        throw new SystemErrorException("This is not a file");
      if (result == 4)
        throw new SystemErrorException("Not allowed to create a file in a file");
      if (result == 5)
        throw new SystemErrorException("The path doesn't exist");
      if (result == 6)
        throw new SystemErrorException("The filename contains invalid character");
    } else {
      int result = redirect_append(input_content, filename, full_path, sub_path,
          tracker.getRoot_directory());
      if (result == 2)
        throw new SystemErrorException("This is not a file");
      if (result == 4)
        throw new SystemErrorException("Not allowed to create a file in a file");
      if (result == 5)
        throw new SystemErrorException("The path doesn't exist");
      if (result == 6)
        throw new SystemErrorException("The filename contains invalid character");
    }
  }

  /**
   * This function would first call the function named check_name to check whether the filename
   * contains invalid characters. And it is able to append string to a specific file or create a new
   * file and add string to the new file. If it finds a error, it would return a number to show what
   * type of error it found.
   * 
   * @param content a String that user wants to append to a file
   * @param filename a String represents the name of file that user wants to append to
   * @param full_path an ArrayList of String contains full path
   * @param sub_path an ArrayList of String contains a path the removes the last one of the full
   *        path
   * @param directory a directory that stands for root or current directory
   * @return integer showing that the operation is successful or the function found a type of error
   */
  private static int redirect_append(String content, String filename, ArrayList<String> full_path,
      ArrayList<String> sub_path, Directory directory) {
    JNode full = FindPath.findpath(full_path, directory);
    JNode sub = FindPath.findpath(sub_path, directory);
    if (full != null) {
      if (full.getIs_directory() == false) {
        File return_outfile = (File) full;
        return_outfile.setContent(return_outfile.getContent().concat(content));
        return 1;
      } else {
        return 2;
      }
    } else {
      if (sub != null) {
        if (sub.getIs_directory() == true) {
          if (check_name(filename) == true)
            return 6;
          else {
            add((Directory) sub, filename, content);
            return 3;
          }
        } else
          return 4;
      } else
        return 5;
    }
  }

  /**
   * This function transform a String that contains the information of path to an ArrayList of
   * String.
   * 
   * @param path a String that contains the information of path
   * @return an ArrayList of String that stores name of every directory appears in the path
   */
  private static ArrayList<String> path_to_arraylist(String path) {
    String[] path_list = path.split("/");
    ArrayList<String> result = new ArrayList<>();
    for (String s : path_list) {
      result.add(s);
    }
    if (result.get(0).equals(""))
      result.remove(0);
    return result;
  }

  /**
   * This function would add a file to its root directory's sub.
   * 
   * @param to_add a directory needs to be added a new file under it
   * @param filename a String that represents the name of new file
   * @param content a String that the new file should contain
   */
  private static void add(Directory to_add, String filename, String content) {
    File file = new File(content, to_add, filename);
    to_add.getSub().add(file);
  }

  /**
   * This function would check the whether a string contains invalid character.
   * 
   * @param name a String that used to name a file
   * @return true or false to represent whether the string contains invalid character
   */
  private static boolean check_name(String name) {
    boolean contain_invalid = false;
    ArrayList<String> char_table = new ArrayList<String>();
    char_table.add(" ");
    char_table.add("/");
    char_table.add(".");
    char_table.add("!");
    char_table.add("@");
    char_table.add("#");
    char_table.add("$");
    char_table.add("%");
    char_table.add("^");
    char_table.add("&");
    char_table.add("*");
    char_table.add("(");
    char_table.add(")");
    char_table.add("{");
    char_table.add("}");
    char_table.add("~");
    char_table.add("|");
    char_table.add("<");
    char_table.add(">");
    char_table.add("?");
    for (String s : char_table) {
      contain_invalid = name.contains(s);
    }
    return contain_invalid;
  }
}
