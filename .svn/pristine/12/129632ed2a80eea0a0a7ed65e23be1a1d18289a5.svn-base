package test;

import static org.junit.Assert.*;
import nodetype.*;
import java.util.ArrayList;
import javax.swing.RootPaneContainer;
import org.junit.Before;
import org.junit.Test;
import command.List;
import driver.Tracker;
import exception.SystemErrorException;

/*
 * For my tests, I choose to use integration testing, since this command is just show the contents
 * of directories which is a part of a file system so i choose to test them together to ensure no
 * error occurs.
 * 
 * @author Du Han
 */
public class ListTest {
  Directory root;
  List list;
  Tracker tracker;

  /*
   * It would set up a tree and a tracker that track the file system to test
   */
  @Before
  public void setUp() {
    list = new List();
    root = new Directory(null, "/");
    Directory directory = new Directory(root, "FolderA");
    root.getSub().add(directory);

    File file1 = new File("I am A", directory, "FileA");
    directory.getSub().add(file1);

    File file2 = new File("I am B", directory, "FileB");
    directory.getSub().add(file2);

    Directory directory2 = new Directory(directory, "FolderB");
    directory.getSub().add(directory2);

    File file3 = new File("I am C", directory, "FileC");
    directory2.getSub().add(file3);

    tracker = new Tracker();
    tracker.setCurrent_directory(root);
    tracker.setRoot_directory(root);
  }

  /*
   * It would test if the file system is correct
   */
  @Test
  public void testFileSystem() {
    assertEquals(root.getName(), "/");
    assertEquals(root.getSub().get(0).getName(), "FolderA");
    assertEquals(((Directory) root.getSub().get(0)).getSub().get(0).getName(), "FileA");
    assertEquals(((Directory) root.getSub().get(0)).getSub().get(1).getName(), "FileB");
    assertEquals(((Directory) root.getSub().get(0)).getSub().get(2).getName(), "FolderB");
  }

  /*
   * It would test if the tracker is correct
   */
  @Test
  public void testTracker() {
    assertEquals(tracker.getRoot_directory().getName(), "/");
    assertEquals(tracker.getCurrent_directory().getName(), "/");
    assertEquals(tracker.getRoot_directory().getSub().get(0).getName(), "FolderA");
  }
/*
 * These tests would test command for several conditions: no parameter, correct parameter with full path,
 * correct parameter with relative path, more than one correct parameters, a series of parameters including
 * incorrect parameter(the path does not exists) and single incorrect parameter.
 */
  @Test
  public void testList() {
    try {
      String[] input0 = {};
      assertEquals(list.execute(input0, tracker), "/:FolderA");
      String[] input1 = {"FolderA"};
      assertEquals(list.execute(input1, tracker), "FolderA:FileA FileB FolderB");
      String[] input2 = {"FolderA/FileB"};
      assertEquals(list.execute(input2, tracker), "FileB");
      String[] input3 = {"/FolderA"};
      assertEquals(list.execute(input3, tracker), "FolderA:FileA FileB FolderB");
      String[] input4 = {"FolderA", "/FolderA/FolderB"};
      assertEquals(list.execute(input4, tracker),
          "FolderA:FileA FileB FolderB\n" + "\n" + "FolderB:FileC");
      String[] input5 = {"FolderA","FolderDNE"};
      assertEquals(list.execute(input5, tracker),"FolderA:FileA FileB FolderB\r" + 
          "FolderDNE directory does not exist");
      String[] input6 = {"FolderA","FolderDNE","FolderA/FolderB"};
      assertEquals(list.execute(input6, tracker),"FolderA:FileA FileB FolderB\r" + 
          "FolderDNE directory does not exist");
      String[] input7 = {"FolderDNE"};
      assertEquals(list.execute(input7, tracker),"\rFolderDNE directory does not exist");
    } catch (SystemErrorException e) {
      fail();
    }

  }
  public void testListRe() {
    
  }
}
