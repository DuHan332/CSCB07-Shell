package command;
import java.util.ArrayList;
import nodetype.*;
import driver.Tracker;
import helper.*;

public class MakeDirectory implements Commands{
  private Directory currentdirectory;
  private Directory root;
  public String execute(String[] input, Tracker track) {
    this.currentdirectory = track.getCurrent_directory();
    this.root =track.getRoot_directory();
    if(input.length!=2) {
      return "must take two arguments";
    }
    else {
    if(mkdir(input[0])) {
      if(mkdir(input[1])) {
        return "both successful";
      }
      if(mkdir(input[1])==false){
        return "dir2 not successful";
      }
    }
    return "dir1 not successful";
  }
 }
 
   private boolean Is_exist(Directory cur, String to_plug){
    boolean result = false;
    for(JNode s: cur.getSub()) {
      if(to_plug.equals(s.getName())) {
        result = true;
      }
    }
    return result;  
  }
  
  private ArrayList<String> path_to_arraylist(String path){
    String[] sub_path = path.split("/");
    ArrayList<String> result = new  ArrayList<>();
    for(String s:sub_path) {
      result.add(s);
    }
    if(result.get(0).equals("")) result.remove(0);
    return result;
   }
  
   private void add(Directory directory, String name) {
    JNode new_thing = new Directory(directory,name);
    ArrayList<JNode> sub1 = new ArrayList<JNode>();
    sub1=directory.getSub();
    sub1.add(new_thing);
    directory.setSub(sub1);
    }
  
   private boolean check_add(Directory directory, String dir) {
     ArrayList<String> temp = path_to_arraylist(dir);// create a arraylist to contain the path
     String need_add = temp.get(temp.size()-1);
     temp.remove(temp.size()-1);
     JNode return_directory = FindPath.findpath(temp, directory);
     if(return_directory != null && return_directory.getIs_directory()== true)//path 是存在的
     {
          if(Is_exist((Directory)return_directory ,need_add)==false)// if doesn't exist
          {
            add((Directory)return_directory, need_add);
            return true;
          }
          else return false; // 有重复名
     }
     else return false;// do something that express error(dir1 提供的path 不存在)   
    }  

   
   private boolean mkdir(String dir) {
     if(dir.substring(0,1).equals("/")==false) // 一定是相对路径 or是directory 
     {
       return check_add(currentdirectory, dir);
     }
     else // dir 是绝对路径
     { 
        return check_add(root, dir);
     }
   }
}
  


