package command;

import java.util.ArrayList;
import driver.Tracker;
import exception.SystemErrorException;
import helper.FindPath;
import nodetype.Directory;
import nodetype.JNode;

public class RemoveDirectory implements Commands {
  public String execute(String[] input, Tracker tracker) throws SystemErrorException {
    if (input.length != 1)
      throw new SystemErrorException("This command can only take one agrument");
    if (input[0].equals("/"))
      throw new SystemErrorException("You are not able to delet the root directory");
    ArrayList<String> listOfpath = path_to_arraylist(input[0]);
    if (input[0].substring(0, 1).equals("/") == false) {
      JNode node = FindPath.findpath(listOfpath, tracker.getCurrent_directory());
      if (node != null) {
        if (node.getIs_directory() == true) {
          node.getRoot().getSub().remove(node.getName());
          return "";
        } else
          throw new SystemErrorException("It's not a directory");
      } else
        throw new SystemErrorException("The path doesn't exist");
    } else {
      if (check_directory(listOfpath, tracker) == true) {
        JNode node = FindPath.findpath(listOfpath, tracker.getCurrent_directory());
        if (node != null) {
          if (node.getIs_directory() == true) {
            node.getRoot().getSub().remove(node.getName());
            return "";
          } else
            throw new SystemErrorException("It's not a directory");
        } else
          throw new SystemErrorException("The path doesn't exist");
      } else
        throw new SystemErrorException(
            "You can't delete a directory that current directory is its subdirectory");
    }
  }
  /**
   * This function transform a String that contains the information of path to an ArrayList of
   * String.
   * 
   * @param path a String that contains the information of path
   * @return an ArrayList of String that stores name of every directory appears in the path
   */
  private ArrayList<String> path_to_arraylist(String path) {
    String[] path_list = path.split("/");
    ArrayList<String> result = new ArrayList<>();
    for (String s : path_list) {
      result.add(s);
    }
    if (result.get(0).equals(""))
      result.remove(0);
    return result;
  }

  private boolean check_directory(ArrayList<String> listOfpath, Tracker tracker) {
    Directory currentdirectory = tracker.getCurrent_directory();
    ArrayList<String> current_path = new ArrayList<String>();
    while (currentdirectory != tracker.getRoot_directory()) {
      current_path.add(0, currentdirectory.getName());
      currentdirectory = currentdirectory.getRoot();
    }
    if (listOfpath.size() > current_path.size())
      return true;
    else {
      for (int i = 0; i < listOfpath.size(); i++) {
        if (listOfpath.get(i).equals(current_path.get(i)) == false)
          return true;
      }
      return false;
    }
  }
}
