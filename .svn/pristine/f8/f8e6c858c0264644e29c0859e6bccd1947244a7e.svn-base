package driver;

import command.*;
import exception.*;
import java.util.HashMap;

/**
 * This class interprets user's input and call the corresponding command. This class would call the
 * GiveOutput the command returns a string to be printed or catch exception from the command.
 * 
 * @author Dezhi Ren
 *
 */

public class InputInterpreter {
  public Tracker tracker;
  private GiveOutput outputfile = new GiveOutput();
  private HashMap<String, String> commandHashMap = new HashMap<String, String>();

  /**
   * The function would first separate user's input and check which command user calls. Next the
   * function would send the input to the corresponding command. Then the function would call the
   * GiveOutput for that command or print error message.
   * 
   * @param input the input from user
   * @exception SystemErrorException this exception with an error message is thrown if the input is
   *            invalid
   * @exception InstantiationException this exception is thrown if command is not in the HashMap
   * @exception IllegalAccessException this exception is thrown if command is not in the HashMap
   * @exception ClassNotFoundException this exception is thrown if command is not in the HashMap
   */
  public void interprete(String input) {
    tracker.getHistory().add(input);
    input = input.replace("\t", " ");
    String[] inputlist = input.trim().split(" +");
    String commandName = inputlist[0];
    outputfile.initializeOutputHashMap();

    try {
      String[] parameter = new String[inputlist.length - 1];
      if (!commandHashMap.containsKey(commandName))
        throw new SystemErrorException(
            "Cannot recognize \"" + commandName + "\" as a valid command");
      Commands command = (Commands) Class.forName(commandHashMap.get(commandName)).newInstance();

      if (inputlist.length == 1) {
        outputfile.printOutput(commandName, command.execute(parameter, tracker));
      } else {
        System.arraycopy(inputlist, 1, parameter, 0, parameter.length);
        outputfile.printOutput(commandName, command.execute(parameter, tracker));
      }
    } catch (SystemErrorException e) {
      System.err.println(e.getMessage());
    } catch (InstantiationException | IllegalAccessException | ClassNotFoundException e) {
      e.printStackTrace();
    }
  }

  /**
   * The function would initialize the command HashMap
   */
  public void initializeCommandHashMap() {
    this.commandHashMap.put("cd", "command.ChangeDirectory");
    this.commandHashMap.put("exit", "command.Exit");
    this.commandHashMap.put("ls", "command.List");
    this.commandHashMap.put("mkdir", "command.MakeDirectory");
    this.commandHashMap.put("pwd", "command.PrintWorkingDirectory");
    this.commandHashMap.put("history", "command.History");
    this.commandHashMap.put("pushd", "command.PushDirectory");
    this.commandHashMap.put("popd", "command.PopDirectory");
    this.commandHashMap.put("cat", "command.Concatenate");
    this.commandHashMap.put("echo", "command.Echo");
    this.commandHashMap.put("man", "command.Manual");

  }

}
